import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter/foundation.dart';

class AudioService {
  static final AudioService _instance = AudioService._internal();
  factory AudioService() => _instance;
  AudioService._internal();

  final FlutterTts _flutterTts = FlutterTts();
  bool _isInitialized = false;
  double _volume = 1.0;
  double _speechRate = 0.6; // Velocidad m√°s lenta y clara para una mujer educadora
  double _speechPitch = 1.4; // Pitch claramente femenino para voz de mujer

  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      debugPrint('üé§ Inicializando AudioService...');
      debugPrint('üåê Plataforma: ${kIsWeb ? "Web" : "M√≥vil"}');
      
      // Configurar callbacks para monitorear el estado
      _flutterTts.setStartHandler(() {
        debugPrint('üé§ TTS comenz√≥ a hablar');
      });
      
      _flutterTts.setCompletionHandler(() {
        debugPrint('üé§ TTS termin√≥ de hablar');
      });
      
      _flutterTts.setErrorHandler((msg) {
        debugPrint('‚ùå TTS Error: $msg');
      });
      
      // Configuraci√≥n espec√≠fica por plataforma
      if (kIsWeb) {
        await _configureWebTTS();
      } else {
        await _configureMobileTTS();
      }
      
      // Configuraci√≥n universal con voz argentina femenina
      await _flutterTts.setLanguage("es-AR");
      await _flutterTts.setSpeechRate(0.6); // M√°s lenta para claridad
      await _flutterTts.setVolume(1.0);
      await _flutterTts.setPitch(1.4); // M√°s agudo para voz femenina
      
      debugPrint('üß™ TTS configurado con voz argentina');
      
      _isInitialized = true;
      debugPrint('‚úÖ AudioService inicializado correctamente con voz argentina');
    } catch (e) {
      debugPrint('‚ùå Error initializing AudioService: $e');
      // Reintentar con configuraci√≥n m√≠nima
      await _fallbackInitialization();
    }
  }

  Future<void> _configureWebTTS() async {
    try {
      debugPrint('üåê Configurando TTS para Web con voz argentina');
      await _flutterTts.setLanguage("es-AR");
      
      // Lista de voces argentinas preferidas
      final preferredVoices = [
        'Google espa√±ol (Argentina)',
        'Google espa√±ol (Argentina) - Isabella',
        'es-AR',
        'Spanish (Argentina)',
        'Espa√±ol (Argentina)',
      ];
      
      dynamic voices = await _flutterTts.getVoices;
      debugPrint('üé§ Voces disponibles: ${voices?.length ?? 0}');
      
      if (voices is List) {
        bool voiceSet = false;
        
        // Buscar voces argentinas
        for (String preferredVoice in preferredVoices) {
          for (dynamic voice in voices) {
            if (voice is Map && voice['name'] != null) {
              String voiceName = voice['name'].toString();
              String locale = voice['locale']?.toString() ?? '';
              
              if (voiceName.toLowerCase().contains('argentina') || 
                  locale.toLowerCase().contains('es-ar') ||
                  locale.toLowerCase().contains('es_ar')) {
                debugPrint('‚úÖ Configurando voz argentina: $voiceName');
                await _flutterTts.setVoice(Map<String, String>.from(voice));
                voiceSet = true;
                break;
              }
            }
          }
          if (voiceSet) break;
        }
        
        if (!voiceSet) {
          debugPrint('‚ö†Ô∏è No se encontr√≥ voz argentina, usando configuraci√≥n por defecto');
        }
      }
      
      await _flutterTts.awaitSpeakCompletion(false);
      
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error configurando voz para web: $e');
    }
  }

  Future<void> _configureMobileTTS() async {
    try {
      debugPrint('üì± Configurando TTS para m√≥vil con voz argentina');
      await _flutterTts.setLanguage("es-AR");
      
      // Configurar motor de Google TTS (mejor calidad)
      try {
        await _flutterTts.setEngine("com.google.android.tts");
        debugPrint('‚úÖ Motor Google TTS configurado');
      } catch (e) {
        debugPrint('‚ö†Ô∏è Motor Google TTS no disponible, usando por defecto');
      }
      
      // Lista de voces argentinas para m√≥vil
      final argentineVoices = [
        'es-ar-x-ard-network',
        'es-ar-x-ard-local',
        'Google espa√±ol (Argentina)',
        'Spanish (Argentina)',
        'Espa√±ol (Argentina)',
      ];
      
      dynamic voices = await _flutterTts.getVoices;
      debugPrint('üì± Voces m√≥viles disponibles: ${voices?.length ?? 0}');
      
      if (voices is List) {
        bool voiceSet = false;
        
        // Buscar voces argentinas para m√≥vil
        for (dynamic voice in voices) {
          if (voice is Map && voice['name'] != null) {
            String voiceName = voice['name'].toString();
            String locale = voice['locale']?.toString() ?? '';
            
            if (voiceName.toLowerCase().contains('argentina') || 
                locale.toLowerCase().contains('es-ar') ||
                locale.toLowerCase().contains('es_ar')) {
              debugPrint('‚úÖ Configurando voz argentina m√≥vil: $voiceName');
              try {
                await _flutterTts.setVoice(Map<String, String>.from(voice));
                voiceSet = true;
                break;
              } catch (e) {
                debugPrint('‚ö†Ô∏è Error con voz argentina: $e');
                continue;
              }
            }
          }
        }
        
        if (!voiceSet) {
          debugPrint('‚ö†Ô∏è No se encontr√≥ voz argentina en m√≥vil');
        }
        
        await _flutterTts.awaitSpeakCompletion(false);
        await _flutterTts.setSharedInstance(true);
      }
      
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error configurando TTS para m√≥vil: $e');
    }
  }

  Future<void> _fallbackInitialization() async {
    try {
      debugPrint('üîÑ Intentando inicializaci√≥n de respaldo...');
      await _flutterTts.setLanguage("es-AR");
      await _flutterTts.setSpeechRate(0.7);
      await _flutterTts.setVolume(1.0);
      await _flutterTts.setPitch(1.2);
      
      _isInitialized = true;
      debugPrint('‚úÖ AudioService inicializado con configuraci√≥n de respaldo argentina');
    } catch (e) {
      debugPrint('‚ùå Error en inicializaci√≥n de respaldo: $e');
      _isInitialized = false;
    }
  }

  Future<void> playLetterSound(String letterCharacter) async {
    await initialize();
    // Usar solo s√≠ntesis de voz para compatibilidad total
    await speakText(letterCharacter);
  }

  Future<void> playWordSound(String word) async {
    await initialize();
    // Usar solo s√≠ntesis de voz para compatibilidad total
    await speakText(word);
  }

  Future<void> playSyllableSound(String syllable) async {
    await initialize();
    // Usar solo s√≠ntesis de voz para compatibilidad total
    await speakText(syllable);
  }

  Future<void> speakText(String text) async {
    if (text.isEmpty) return;
    
    try {
      debugPrint('üé§ Solicitud de voz: "$text"');
      
      if (!_isInitialized) {
        await initialize();
      }
      
      await _flutterTts.stop();
      await Future.delayed(const Duration(milliseconds: 300)); // M√°s tiempo para evitar cortes
      
      // Configuraci√≥n argentina simple con voz femenina
      await _flutterTts.setLanguage("es-AR");
      await _flutterTts.setSpeechRate(0.6); // M√°s lenta y clara
      await _flutterTts.setPitch(1.4); // Claramente femenino
      await _flutterTts.setVolume(1.0);
      await _flutterTts.awaitSpeakCompletion(false);
      
      if (!kIsWeb) {
        await _flutterTts.setSharedInstance(true);
      }
      
      // Sin procesamiento complejo del texto - usar directamente
      await _flutterTts.speak(text);
      
      // Esperar que termine completamente antes de continuar
      if (kIsWeb) {
        await Future.delayed(Duration(milliseconds: (text.length * 100).clamp(500, 3000)));
      }
      
      debugPrint('‚úÖ Audio completado: "$text"');
      
    } catch (e) {
      debugPrint('‚ùå Error reproduciendo audio: $e');
      try {
        await _flutterTts.stop();
        await Future.delayed(const Duration(milliseconds: 100));
        await _flutterTts.speak(text);
      } catch (retryError) {
        debugPrint('‚ùå Error en reintento: $retryError');
      }
    }
  }
  

  Future<void> _ensureArgentineVoiceSettings() async {
    try {
      await _flutterTts.setLanguage("es-AR");
      await _flutterTts.setSpeechRate(0.6);
      await _flutterTts.setPitch(1.4);
      await _flutterTts.setVolume(1.0);
      
      _speechRate = 0.6;
      _speechPitch = 1.4;
      _volume = 1.0;
      
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error configurando voz argentina: $e');
    }
  }

  Future<void> speakPhoneme(String phoneme) async {
    await initialize();
    
    try {
      await _flutterTts.speak(phoneme);
    } catch (e) {
      debugPrint('Error speaking phoneme: $phoneme, Error: $e');
    }
  }

  Future<void> playSuccessSound() async {
    await initialize();
    // Usar sonidos de texto para mayor compatibilidad
    await speakText('¬°Muy bien!');
  }

  Future<void> playErrorSound() async {
    await initialize();
    // Usar sonidos de texto para mayor compatibilidad
    await speakText('Oops, int√©ntalo de nuevo');
  }

  Future<void> playClickSound() async {
    // Sin sonido de click para evitar errores - solo funcionalidad visual
    debugPrint('Click sound requested');
  }

  Future<void> playBackgroundMusic() async {
    // M√∫sica de fondo deshabilitada para evitar errores de archivos faltantes
    debugPrint('Background music requested - using ambient sound synthesis');
  }

  Future<void> stopBackgroundMusic() async {
    // M√∫sica de fondo deshabilitada - no hay nada que detener
    debugPrint('Stop background music requested');
  }

  Future<void> pauseBackgroundMusic() async {
    // M√∫sica de fondo deshabilitada - no hay nada que pausar
    debugPrint('Pause background music requested');
  }

  Future<void> resumeBackgroundMusic() async {
    // M√∫sica de fondo deshabilitada - no hay nada que reanudar
    debugPrint('Resume background music requested');
  }

  Future<void> stopAllSounds() async {
    try {
      await _flutterTts.stop();
    } catch (e) {
      debugPrint('Error stopping all sounds: $e');
    }
  }

  // M√©todo abreviado para detener sonidos al navegar
  Future<void> stop() async {
    await stopAllSounds();
  }

  Future<void> setVolume(double volume) async {
    _volume = volume.clamp(0.0, 1.0);
    await _flutterTts.setVolume(_volume);
  }

  Future<void> setSpeechRate(double rate) async {
    _speechRate = rate.clamp(0.1, 1.0);
    await _flutterTts.setSpeechRate(_speechRate);
  }

  Future<void> setSpeechPitch(double pitch) async {
    _speechPitch = pitch.clamp(0.5, 2.0);
    await _flutterTts.setPitch(_speechPitch);
  }

  double get volume => _volume;
  double get speechRate => _speechRate;
  double get speechPitch => _speechPitch;
  bool get isInitialized => _isInitialized;

  Future<void> dispose() async {
    await _flutterTts.stop();
  }

  Future<void> speakLetterIntroduction(String letter, String phoneme, List<String> exampleWords) async {
    await initialize();
    
    try {
      await speakText('¬°Hola! Soy la letra $letter');
      await Future.delayed(const Duration(milliseconds: 700));
      await speakText('Mi sonido es $phoneme');
      await Future.delayed(const Duration(milliseconds: 700));
      
      if (exampleWords.isNotEmpty) {
        await speakText('¬øQuieres conocer mis palabras favoritas?');
        await Future.delayed(const Duration(milliseconds: 500));
        
        for (final word in exampleWords.take(3)) {
          await speakText('¬°$word!');
          await Future.delayed(const Duration(milliseconds: 900));
        }
        await speakText('¬øA que son divertidas?');
      }
    } catch (e) {
      debugPrint('Error speaking letter introduction: $e');
    }
  }

  Future<void> speakSyllableLesson(String letter, List<String> syllables) async {
    await initialize();
    
    try {
      await speakText('¬°Vamos a jugar con mis s√≠labas de la letra $letter!');
      await Future.delayed(const Duration(milliseconds: 700));
      
      await speakText('Escucha bien:');
      await Future.delayed(const Duration(milliseconds: 500));
      
      for (final syllable in syllables) {
        await speakText(syllable);
        await Future.delayed(const Duration(milliseconds: 700));
      }
      
      await speakText('¬°Genial! Ahora repite conmigo');
      await Future.delayed(const Duration(milliseconds: 600));
      
      for (final syllable in syllables) {
        await speakText('$syllable... tu turno');
        await Future.delayed(const Duration(milliseconds: 1200));
      }
      
      await speakText('¬°Qu√© bien lo haces!');
    } catch (e) {
      debugPrint('Error speaking syllable lesson: $e');
    }
  }

  Future<void> speakEncouragement() async {
    final encouragements = [
      '¬°Eres incre√≠ble!',
      '¬°Qu√© inteligente eres!',
      '¬°Me encanta como aprendes!',
      '¬°Lo est√°s haciendo genial!',
      '¬°Eres un s√∫per estudiante!',
      '¬°Qu√© bien vas aprendiendo!',
      '¬°Estoy muy orgullosa de ti!',
      '¬°Sigue as√≠, campe√≥n!',
      '¬°Eres fant√°stico!',
      '¬°Qu√© divertido es aprender contigo!',
    ];
    
    final random = DateTime.now().millisecondsSinceEpoch % encouragements.length;
    await speakText(encouragements[random]);
  }

  Future<void> speakTryAgain() async {
    final tryAgainPhrases = [
      '¬°Vamos, t√∫ puedes hacerlo!',
      '¬°Casi lo tienes! Int√©ntalo otra vez',
      '¬°No te preocupes, todos aprendemos!',
      '¬°√Ånimo! Estoy aqu√≠ para ayudarte',
      '¬°Qu√© valiente eres al intentarlo!',
      '¬°Cada error nos ayuda a aprender!',
      '¬°Vamos, s√© que lo puedes lograr!',
    ];
    
    final random = DateTime.now().millisecondsSinceEpoch % tryAgainPhrases.length;
    await speakText(tryAgainPhrases[random]);
  }

  // M√©todo para llamar al ni√±o por su nombre cuando complete su nombre
  Future<void> speakNameCompletion(String childName) async {
    if (childName.isEmpty) return;
    
    final nameCompletionPhrases = [
      '¬°Muy bien, $childName! ¬°Has escrito tu nombre correctamente!',
      '¬°Excelente trabajo, $childName! ¬°Tu nombre se ve hermoso!',
      '¬°Fant√°stico, $childName! ¬°Qu√© bien escribes tu nombre!',
      '¬°Bravo, $childName! ¬°Me encanta como escribes!',
      '¬°Perfecto, $childName! ¬°Tu nombre est√° muy bien escrito!',
      '¬°Qu√© inteligente eres, $childName! ¬°Lo has hecho genial!',
    ];
    
    final random = DateTime.now().millisecondsSinceEpoch % nameCompletionPhrases.length;
    await speakText(nameCompletionPhrases[random]);
  }

  // M√©todo para saludar al ni√±o por su nombre al iniciar
  Future<void> speakWelcomeWithName(String childName) async {
    if (childName.isEmpty) {
      await speakText('¬°Hola! ¬°Qu√© gusto verte aqu√≠ para aprender!');
      return;
    }
    
    final welcomePhrases = [
      '¬°Hola, $childName! ¬°Qu√© alegr√≠a verte de nuevo!',
      '¬°Buenos d√≠as, $childName! ¬øListos para aprender juntos?',
      '¬°Hola, mi querido $childName! ¬°Vamos a divertirnos aprendiendo!',
      '¬°Qu√© bueno verte, $childName! ¬°Hoy ser√° un d√≠a genial!',
      '¬°Hola, $childName! ¬°Estoy muy feliz de estar contigo!',
    ];
    
    final random = DateTime.now().millisecondsSinceEpoch % welcomePhrases.length;
    await speakText(welcomePhrases[random]);
  }
}